#!/usr/bin/env node

const VERSION = '1.0.0';

const PARAMETERS_SCHEMA = [
    { name: 'email',      alias: 'e', type: String,  description: 'Account email' },
    { name: 'repository', alias: 'r', type: String,  description: 'Repository URL or command' },
    { name: 'path',       alias: 'p', type: String,  description: 'Local FULL path for repository - will not be appended with repository name if specified (Default: repository name in current working directory)' },
    { name: 'ssh-key',    alias: 's', type: String,  description: 'Use existing SSH-key' },
    { name: 'help',       alias: 'h', type: null,    description: 'Display this help and exit' },
    { name: 'version',    alias: 'v', type: null,    description: 'Output version information and exit' },
    { name: 'debug',      alias: 'd', type: Boolean, description: 'Show debug messages' },
];

const { exec, spawn } = require("child_process");
const fs = require('fs');
const path = require('path');
const readline = require('readline');
const util = require('util');

const ARGS = parseArgs(process.argv);

const HOME_DIR = require('os').homedir();
const SSH_DIR = `${HOME_DIR}/.ssh`;
const SSH_CONFIG_PATH = `${SSH_DIR}/config`;

const CONFIG_URLS = {
    'bitbucket.org': 'https://bitbucket.org/account/settings/ssh-keys/',
    'github.com': 'https://github.com/settings/ssh/new',
    'gitlab.com': 'https://gitlab.com/-/profile/keys',
}

const userInput = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

const $ = createColors();
let indentAskPrompt = false;

const appendFile = util.promisify(fs.appendFile);
const readFileAsync = util.promisify(fs.readFile);
const readFile = async path => readFileAsync(path, 'utf-8');
const readDir = util.promisify(fs.readdir);

async function main () {
    debug('"DEBUG" mode enabled');
    if (ARGS.error) {
        console.error($.red(ARGS.error));
        return showUsage();
    }
    if (ARGS.help) {
        return showUsage();
    }
    if (ARGS.version) {
        return showVersion();
    }

    logStepOpen('Step 1: check email and project');
    const { email, serviceName, repoPath } = await ensureMainArgs(ARGS);
    debug(`Parsed email: ${email}`);
    debug(`Parsed serviceName: ${serviceName}`);
    debug(`Parsed repository path: ${repoPath}`);
    logStepClose('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~');

    logStepOpen('Step 2: generate SSH key and setup profile in SSH config');
    const profile = getProfileName(serviceName, email)

    const isProfileConfigured = await checkProfileExistence(profile);

    if (isProfileConfigured) {
        console.log($.cyan(`SSH key has already been generated and configured in SSH config earlier.`));
    } else {
        const keyGenerated = await configureProfile(serviceName, email, profile, ARGS['ssh-key']);
        if (keyGenerated) {
            console.log($.green(`SSH key has just been generated and configured in SSH config.`));
        } else {
            console.log($.green(`SSH profile has just been configured in config.`));
        }
    }
    logStepClose('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~');

    logStepOpen('Step 3: setup SSH key at remote service');
    const setupRequested = !isProfileConfigured || await askBoolean([
        $.grey(`Sometimes setup process can be stopped after SSH key generation, but before setup at ${$.cyan(serviceName)}.`),
        `Do you want to procceed with setting up SSH key at ${$.cyan(serviceName)}?`
    ].join('\n'));

    if (setupRequested) {
        await setupSshKeyAtRemoteService(email, serviceName);
    }
    logStepClose('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~');

    logStepOpen('Step 4: Clone repository');
    const relativePath = ARGS.path ? ARGS.path : /([^/]+).git$/.exec(repoPath)[1];
    debug(`Repo local relative path: ${relativePath}`);
    const localFullPath = path.resolve(relativePath);
    debug(`Repo local absolute path: ${localFullPath}`);
    const repoCloned = await cloneRepo(email, profile, repoPath, localFullPath);
    logStepClose('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~');

    logStepOpen('Step 5: Setup repository settings');
    if (repoCloned || await askBoolean([
        $.magenta(`Directory ${localFullPath} already exists in current directory.`),
        `Do you want to proceed with user setup in that directory?`,
    ].join(' '))) {
        const userSignature = await configureGitUser(email, localFullPath);
        console.log($.green([
            '',
            'RESULTS:',
            `Repository ${$.black.bgYellow(repoPath)} clonned to ${$.black.bgYellow(localFullPath)}`,
            `Git user configured as ${$.black.bgYellow(userSignature)}`
        ].join('\n')));
    } else {
        console.log($.green([
            '',
            'RESULTS:',
            `Repository ${$.black.bgYellow(repoPath)} clonning was ${$.magenta('SKIPPED')}`
        ].join('\n')));
    }
    logStepClose('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~');
}

async function ask (message) {
    return new Promise((resolve, _reject) => {
        const indentation = indentAskPrompt ? '\n' : '';
        indentAskPrompt = true;
        userInput.question(`${indentation}${$.blue(message)} `, (answer) => resolve(answer.trim()));
    });
}

async function askBoolean (message, defaultYes = true) {
    const suggestions = defaultYes ? `(${$.cyan('Y')}/n, ${$.cyan('Enter')} for ${$.cyan('Yes')})` : `(y/${$.cyan('N')}, ${$.cyan('Enter')} for ${$.cyan('No')})`;
    let fullMessage = `${message} ${suggestions}`;

    let attempts = 0;
    do {
        const answer = await ask(fullMessage);

        if (!answer) return defaultYes;
        const firstLetter = answer[0].toLowerCase();

        if (firstLetter === 'y') return true;
        if (firstLetter === 'n') return false;

        fullMessage = [
            'Please, specify one of the following options (case insensitive): y, n, yes, no.',
            `Or press Enter for default answer (${defaultYes ? 'yes' : 'no'})`
        ].join('\n');
    } while(++attempts < 3);

    console.error($.red("Correct answer was not provided during 3 attempts"));
    process.exit(2);
}

async function checkProfileExistence (profile) {
    debug(`Checking profile "${profile}" existence...`);

    const config = await readSshConfig();
    const escapedProfile = profile.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    const result = new RegExp(`^Host ${escapedProfile}`, 'mg').test(config);

    if (result) {
        debug(`Checking profile "${profile}" finished - profile exists!`);
    } else {
        debug(`Checking profile "${profile}" finished - profile does not exist!`);
    }

    return result;
}

async function cloneRepo (email, profile, remoteRelativePath, localFullPath) {
    debug(`Preparing repository "${remoteRelativePath}"...`)
    debug(`Repository full path: ${localFullPath}`)

    const localParentPath = path.dirname(localFullPath);
    debug(`Local repo parent directory path: ${localParentPath}`);
    const localRepoDir = path.basename(localFullPath);
    debug(`Local repo dir name: ${localRepoDir}`);

    const repoOriginUrl = `${profile}:${remoteRelativePath}`;

    const subDirectories = await readDir(localParentPath)
        .catch(error => {
            if (error.code === 'ENOENT') return [];
            throw error;
        });

    if (subDirectories.includes(localRepoDir)) {
        debug(`Destination directory exists: ${localFullPath}`);

        const directoryContent = await readDir(localFullPath);

        if (directoryContent.length) {
            debug(`Destination directory is not empty: ${localFullPath}`);

            const remoteExistingUrl = await executeBuffered(`git config --get remote.origin.url`, localFullPath)
                .catch(_err => '');

            if (repoOriginUrl === remoteExistingUrl.trim()) {
                console.log($.cyan(`Repository already cloned!`));
                return true;
            }

            throw `Specified directory is not empty! Please, choose empty or absent directory or directory with cloned project.`;
        }
    }

    debug(`Clonning repository with origin URL "${repoOriginUrl}"...`);

    await executePiped(`git clone ${repoOriginUrl} ${localFullPath}`);
    console.log($.green(`Clonning repository succeeded!`));

    return true;
}

async function configureGitUser (email, repoDirectory) {
    console.log(`Configuring git user for email "${$.magenta(email)}" in "${$.cyan(repoDirectory)}"...`)

    const userName = await getGitUserName(email, repoDirectory);

    const userSignature = `${userName} <${email}>`;
    debug(`Setting git user as "${userSignature}"...`)

    await executeBuffered(`git config user.name "${userName}"`, repoDirectory);
    await executeBuffered(`git config user.email "${email}"`, repoDirectory);

    debug(`Configuring git user as "${userSignature}" in "${repoDirectory}" succeeded!`)

    return userSignature;
}

async function configureProfile (serviceName, email, profile, specifiedSshKey) {
    debug(`Configuring profile "${profile}" in SSH config...`)

    let keyFullPath;
    let sshKeyGenerated = false;
    if (specifiedSshKey) {
        keyFullPath = path.resolve(specifiedSshKey).replace(/\.pub$/i, '');
        const keyParentDirectory = path.dirname(keyFullPath);
        const keyName = path.basename(keyFullPath);

        debug(`Checking SSH key: ${keyName}...`)

        const existingKeyFiles = await readDir(keyParentDirectory, 'utf8');

        if (!existingKeyFiles.includes(keyName)) {
            throw `Specified private key does not exist: ${keyFullPath}`;
        }
        if (!existingKeyFiles.includes(`${keyName}.pub`)) {
            throw `Specified public key does not exist: ${keyFullPath}.pub`;
        }
    } else {
        const keyName = getKeyName(email);

        debug(`Checking SSH key: ${keyName}...`)

        const existingKeyFiles = await readDir(SSH_DIR, 'utf8');

        if (existingKeyFiles.includes(keyName) && existingKeyFiles.includes(`${keyName}.pub`)) {
            debug(`Requested key "${keyName}" exists`);
        } else {
            await createSshKey(keyName, email);
            sshKeyGenerated = true;
        }

        keyFullPath = path.join(SSH_DIR, keyName);
    }

    const configLines = [
        '',
        `# ${email} for ${serviceName}`,
        `Host ${profile}`,
        `  IdentityFile ${keyFullPath}`,
        `  IdentitiesOnly yes`,
        `  HostName ${serviceName}`,
        `  StrictHostKeyChecking no`,
        `  User git`,
        ''
    ].join('\n');

    await appendFile(SSH_CONFIG_PATH, configLines);

    debug(`Configuring profile "${profile}" in SSH config succeeded!`);

    return sshKeyGenerated;
}

function createColors () {
    const closeColor = '\u001b[39m';
    const closeBg = '\u001b[49m';
    const closeTextStyle = '\u001b[22m';
    const styles = {
        reset: { open: '\u001b[0m', close: '\u001b[0m' },

        bold: { open: '\u001b[1m', close: closeTextStyle },
        dim: { open: '\u001b[2m', close: closeTextStyle },
        hidden: { open: '\u001b[8m', close: '\u001b[28m' },
        inverse: { open: '\u001b[7m', close: '\u001b[27m' },
        italic: { open: '\u001b[3m', close: '\u001b[23m' },
        strikethrough: { open: '\u001b[9m', close: '\u001b[29m' },
        underline: { open: '\u001b[4m', close: '\u001b[24m' },

        black: { open: '\u001b[30m', close: closeColor },
        blackBright: { open: '\u001b[90m', close: closeColor },
        blue: { open: '\u001b[34m', close: closeColor },
        blueBright: { open: '\u001b[94m', close: closeColor },
        cyan: { open: '\u001b[36m', close: closeColor },
        cyanBright: { open: '\u001b[96m', close: closeColor },
        gray: { open: '\u001b[90m', close: closeColor },
        green: { open: '\u001b[32m', close: closeColor },
        greenBright: { open: '\u001b[92m', close: closeColor },
        grey: { open: '\u001b[90m', close: closeColor },
        magenta: { open: '\u001b[35m', close: closeColor },
        magentaBright: { open: '\u001b[95m', close: closeColor },
        red: { open: '\u001b[31m', close: closeColor },
        redBright: { open: '\u001b[91m', close: closeColor },
        white: { open: '\u001b[37m', close: closeColor },
        whiteBright: { open: '\u001b[97m', close: closeColor },
        yellow: { open: '\u001b[33m', close: closeColor },
        yellowBright: { open: '\u001b[93m', close: closeColor },

        bgBlack: { open: '\u001b[40m', close: closeBg },
        bgBlackBright: { open: '\u001b[100m', close: closeBg },
        bgBlue: { open: '\u001b[44m', close: closeBg },
        bgBlueBright: { open: '\u001b[104m', close: closeBg },
        bgCyan: { open: '\u001b[46m', close: closeBg },
        bgCyanBright: { open: '\u001b[106m', close: closeBg },
        bgGray: { open: '\u001b[100m', close: closeBg },
        bgGreen: { open: '\u001b[42m', close: closeBg },
        bgGreenBright: { open: '\u001b[102m', close: closeBg },
        bgGrey: { open: '\u001b[100m', close: closeBg },
        bgMagenta: { open: '\u001b[45m', close: closeBg },
        bgMagentaBright: { open: '\u001b[105m', close: closeBg },
        bgRed: { open: '\u001b[41m', close: closeBg },
        bgRedBright: { open: '\u001b[101m', close: closeBg },
        bgWhite: { open: '\u001b[47m', close: closeBg },
        bgWhiteBright: { open: '\u001b[107m', close: closeBg },
        bgYellow: { open: '\u001b[43m', close: closeBg },
        bgYellowBright: { open: '\u001b[103m', close: closeBg },
    };

    const availableStyles = Object.keys(styles);
    const repeatingCloses = [closeColor, closeBg, closeTextStyle];
    const applyStyle = (styleName, str) => {
        const { open, close } = styles[styleName];

        // restore style after internal style override if exists
        for (const rClose of repeatingCloses) {
            if (rClose !== close) continue;

            const colorParts = str.split(rClose);
            if (colorParts.length > 1) {
                str = colorParts.join(rClose + open);
            }
        }

        return `${open}${str}${close}`;
    }
    const getPartialStyler = (styleNames, part) => () => {
        return styleNames.map(s => styles[s][part]).join('');
    };
    const createStyler = (styles = []) => new Proxy((str) => {
        return styles.reduce((acc, style) => applyStyle(style, acc), str);
    }, {
        get(target, prop, _receiver) {
            if (['close', 'open'].includes(prop)) { return getPartialStyler(styles, prop); }

            if (!availableStyles.includes(prop)) return target[prop];

            return createStyler([...styles, prop]);
        }
    });

    // Test colors
    // const $ = createStyler();
    // // for (const style of availableStyles) {
    // //     console.log(style, $[style](`Hello world!`), $[style].bold(`Hello world!`), $.inverse[style](`Hello world!`));
    // // }
    // console.log($.green(`This is green text. ${$.red(`This text must be red. ${$.blue('This text must be blue.')} This text must be red again.`)} This text must be green again`));
    // console.log($.green(`This is green text. ${$.red(`This text must be red.`)} This text must be green again. ${$.red(`This text must be red. ${$.blue('This text must be blue.')} This text must be red again.`)} This text must be green again`));
    // console.log($.bgRed(`This is text w/ red bg. ${$.bgBlue('This text must have blue bg.')} This text must have red bg again`));
    // console.log($.bgRed(`This is text w/ red bg. ${$.bgYellow(`This text must have yellow bg. ${$.blue(`This text must have yellow bg and blue color.`)}`)} This text must have red bg and default color again`));
    // console.log($.bold(`This is just bold text. ${$.red('This text must be red and bold.')} This text must be just bold again`));
    // console.log($.italic(`This is just italic text. ${$.red('This text must be red and italic.')} This text must be just italic again`));
    // console.log($.underline(`This is just underlined text. ${$.red('This text must be red and underlined.')} This text must be just underlined again`));
    // console.log($.bold(`This is just bold text. ${$.underline('This text must be underlined and bold.')} This text must be just bold again`));
    // console.log($.bold(`This is just bold text. ${$.dim('This text must be dim and bold.')} This text must be just bold again`));
    // console.log([
    //     $.red.bgWhite('keyContent'),
    //     '',
    //     `---`
    // ].join('\n'));
    // process.exit();

    return createStyler();
}

async function createSshKey (keyName, comment) {
    return executeBuffered(`ssh-keygen -t ed25519 -f ${SSH_DIR}/${keyName} -C "${comment}" -q -N ""`);
}

function debug (message) {
    if (ARGS.debug) {
        console.debug($.grey.italic(message));
    }
}

async function ensureMainArgs (passedArgs) {
    const email = passedArgs.email || await ask(`Insert account email ${getExampleStr('john.doe@smart.com')}:`);

    if (!email) {
        throw `Account email is mandatory!`;
    }

    const repository = passedArgs.repository || await ask([
        'Insert project clone URL or command',
        getExampleStr('https://github.com/facebook/react.git'),
        getExampleStr('git@github.com:facebook/react.git'),
        getExampleStr('git clone https://github.com/facebook/react.git'),
        getExampleStr('git clone git@github.com:facebook/react.git'),
        ':'
    ].join('\n'));

    if (!repository) {
        throw `Repository clone URL or command is mandatory!`;
    }

    await ask(`You specified email ${$.bgBlue.white(email)} and git project URL ${$.bgBlue.white(repository)}.`);

    const repositoryUrlParts = repository
        .replace(/^(git clone )?(?:https?:\/\/|git@)/gi, '')
        .match(/^(?<serviceName>[^:/]+)[:/](?<repoPath>.+)$/)
        .groups;

    if (!Object.keys(CONFIG_URLS).includes(repositoryUrlParts.serviceName)) {
        const message = $.magenta([
            `Unfortunately, settings for ${repositoryUrlParts.serviceName} was not tested, so it may not work.`,
            'Proceed on your own risk.',
            '¯\\_(ツ)_/¯'
        ].join('\n'));

        if (repository === passedArgs.repository) {
            console.log(message);
        } else {
            await ask(message);
        }
    }

    return { email, ...repositoryUrlParts };
}

async function executeBuffered (command, cwd) {
    debug(`Executing command (buffered): ${command} (cwd: ${cwd})`);

    return new Promise((resolve, reject) => {
        exec(command, { cwd }, (error, stdout, stderr) => {
            if (error) return reject(error);

            if (stderr) {
                console.error(stderr);
            }

            resolve(stdout);
        });
    });
}

async function executePiped (fullCommand, cwd) {
    debug(`Executing command: ${fullCommand} (cwd: ${cwd})`);

    return new Promise((resolve, reject) => {
        const [command, ...args] = fullCommand.split(' ');
        const child = spawn(command, args);

        child.stdout.on('data', data => console.log(String(data)));

        child.stderr.on('data', data => console.error(String(data)));

        child.on('error', reject);

        child.on('close', (code) => {
            if (!code) {
                return resolve();
            }

            reject(new Error(`Command "${fullCommand}" exited with code ${code}`));
        });
    });
}

function getEmailSafeString (email) {
    return email.replace('@', '__');
}

function getExampleStr (message) {
    return $.italic.cyan(`(Example: ${$.white(message)})`);
}

function getKeyName (email) {
    return `work__${getEmailSafeString(email)}`
}

function getProfileName (serviceName, email) {
    // Example: github.com-test.user__gmail.com
    return `${serviceName}-${getEmailSafeString(email)}`;
}

async function getGitUserName (email, repoDirectory) {
    const userSignature = await executeBuffered(
        `git log --pretty=format:"%ae %an"  --all --branches --remotes | grep ${email} | head -n 1`,
        repoDirectory
    );

    if (userSignature) {
        const userName = /^[^ ]* ?(.*)$/.exec(userSignature.trim())[1];

        const userAnswer = await ask([
            `Following user name found in previous commits in git: ${$.red(userName)}.`,
            `Specify another name or left empty to use found name:`
        ].join('\n'));

        return userAnswer || userName;
    } else {
        const emailName = email.split('@')[0];
        const userName = emailName[0].toUpperCase() + emailName.substring(1);

        const userAnswer = await ask([
            `Previous commits for this email were not found, so user name generated from email: ${$.red.bold(userName)}.`,
            `Specify another name or left empty to use generated name:`
        ].join('\n'));

        return userAnswer || userName;
    }
}

function logStepClose () {
    console.log($.yellow('~'.repeat(80)));
}

function logStepOpen (message) {
    if (logStepOpen.__indentStep) {
        console.log();
    } else {
        logStepOpen.__indentStep = true;
    }
    console.log($.yellow(` ${message} `.padStart(Math.floor((80 - message.length) / 2) + message.length + 1, '~').padEnd(80, '~')));
    indentAskPrompt = false;
}

function parseArgs (args) {
    const parsed = {
        fileName: path.basename(args[1]),
    };

    const valuableParams = [];

    for (const { alias, name, type } of PARAMETERS_SCHEMA) {
        if (type === null) {
            if (args.includes(`-${alias}`) || args.includes(`--${name}`)) {
                return {
                    ...parsed,
                    [name]: true
                };
            }
        } else {
            valuableParams.push({ alias, name, type });
            parsed[name] = type === Boolean ? false : null;
        }
    }

    const params = args.slice(2);

    // Short version params definition
    if (params[0] && !params[0].startsWith('-')) {
        parsed.email = params.shift();

        if (params[0] && !params[0].startsWith('-')) {
            parsed.repository = params.shift();
        }
    }

    for (let i = 0, l = params.length; i < l; i++) {
        const keyParts = /^(?:-([a-z])|--([a-z]{2,}))$/.exec(params[i]);
        const key = keyParts && (keyParts[1] || keyParts[2]);
        let found = false;

        for (const { alias, name, type } of valuableParams) {
            if (key !== alias && key !== name) continue;

            if (type === Boolean) {
                parsed[name] = true;
            } else {
                parsed[name] = params[++i];
            }

            found = true;
            break;
        }

        if (!found) {
            return {
                ...parsed,
                error: `Unexpected parameter: ${params[i]}`
            };
        }
    }

    return parsed;
}

async function readSshConfig () {
    // just cache
    if (readSshConfig.__content) return readSshConfig.__content;

    const rawContent = await readFile(SSH_CONFIG_PATH);
    const content = rawContent
        .replace(/#[^\n]*\n/gim, '')
        .replace(/\n+/gim, '\n')

    return readSshConfig.__content = content;
}

async function setupSshKeyAtRemoteService (email, serviceName) {
    debug(`Settig up SSH key in "${serviceName}"...`)

    const keyName = `${getKeyName(email)}.pub`;

    const keyContent = await readFile(`${SSH_DIR}/${keyName}`);
    const configUrl = CONFIG_URLS[serviceName] || `https://${serviceName}`;

    await ask([
        `Copy the following lines into your clipboard and paste them as SSH key content at ${$.cyan(configUrl)} (${$.magenta(`ensure, that you authenticated as ${$.red(email)}!`)}):`,
        '',
        $.red.bgWhite(keyContent.trim()),
        '',
        `Press ${$.green('Enter')} when you finish setup at ${$.cyan(serviceName)}.`
    ].join('\n'));

    debug(`Settig up SSH key in ${serviceName} succeeded!`)

    // TODO: Check chmod for files and directories if needed

    // TODO: Remove keys from SSH agent
}

function showUsage () {
    const ggg = ARGS.fileName;
    console.log([
        $.green(`Usage: `) + $.yellow(`${ggg} [user_email] [git_repository_URL_or_clone_command_] [OPTIONS]...`),
        $.cyan(`Setup git repository with some useful additions.`),
        ``,
        ...PARAMETERS_SCHEMA.map(({ alias, description, name }) => $.green(
            `  -${alias}, --${name.padEnd(15, ' ')} ${description}`
        )),
        ``,
        $.green(`Examples:`),
        $.yellow(`  ${ggg}`),
            $.cyan(`        Run setup and all necessary settings will be prompted.`),
        $.yellow(`  ${ggg} user@sample.com https://github.com/facebook/react.git`),
            $.cyan(`        Run setup with specified user email address and repository link; other necessary settings will be prompted.`),
        $.yellow(`  ${ggg} -p ./projects/react_local -r https://github.com/facebook/react.git`),
            $.cyan(`        Run setup with specified user email address, repository link and destination path.`),
    ].join('\n'));
}

function showVersion () {
    console.log(`${ARGS.fileName} Version ${VERSION}`);
}

main()
    .then(() => 0, error => console.error($.red.open(), error, $.red.close()) || 1)
    .then((status) => process.exit(status))
